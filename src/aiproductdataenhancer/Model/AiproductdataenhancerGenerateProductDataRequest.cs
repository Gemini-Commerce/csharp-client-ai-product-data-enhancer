/*
 * aiproductdataenhancer/service.proto
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = aiproductdataenhancer.Client.OpenAPIDateConverter;

namespace aiproductdataenhancer.Model
{
    /// <summary>
    /// AiproductdataenhancerGenerateProductDataRequest
    /// </summary>
    [DataContract(Name = "aiproductdataenhancerGenerateProductDataRequest")]
    public partial class AiproductdataenhancerGenerateProductDataRequest : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets LanguageCode
        /// </summary>
        [DataMember(Name = "languageCode", EmitDefaultValue = false)]
        public AiproductdataenhancerLanguageCode? LanguageCode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AiproductdataenhancerGenerateProductDataRequest" /> class.
        /// </summary>
        /// <param name="tenantId">tenantId.</param>
        /// <param name="languageCode">languageCode.</param>
        /// <param name="productInformation">productInformation.</param>
        /// <param name="productDataToGenerate">productDataToGenerate.</param>
        public AiproductdataenhancerGenerateProductDataRequest(string tenantId = default(string), AiproductdataenhancerLanguageCode? languageCode = default(AiproductdataenhancerLanguageCode?), List<AiproductdataenhancerGenerateProductDataRequestProductInformation> productInformation = default(List<AiproductdataenhancerGenerateProductDataRequestProductInformation>), List<GenerateProductDataRequestProductDataToGenerate> productDataToGenerate = default(List<GenerateProductDataRequestProductDataToGenerate>))
        {
            this.TenantId = tenantId;
            this.LanguageCode = languageCode;
            this.ProductInformation = productInformation;
            this.ProductDataToGenerate = productDataToGenerate;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Gets or Sets TenantId
        /// </summary>
        [DataMember(Name = "tenantId", EmitDefaultValue = false)]
        public string TenantId { get; set; }

        /// <summary>
        /// Gets or Sets ProductInformation
        /// </summary>
        [DataMember(Name = "productInformation", EmitDefaultValue = false)]
        public List<AiproductdataenhancerGenerateProductDataRequestProductInformation> ProductInformation { get; set; }

        /// <summary>
        /// Gets or Sets ProductDataToGenerate
        /// </summary>
        [DataMember(Name = "productDataToGenerate", EmitDefaultValue = false)]
        public List<GenerateProductDataRequestProductDataToGenerate> ProductDataToGenerate { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AiproductdataenhancerGenerateProductDataRequest {\n");
            sb.Append("  TenantId: ").Append(TenantId).Append("\n");
            sb.Append("  LanguageCode: ").Append(LanguageCode).Append("\n");
            sb.Append("  ProductInformation: ").Append(ProductInformation).Append("\n");
            sb.Append("  ProductDataToGenerate: ").Append(ProductDataToGenerate).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

/*
 * aiproductdataenhancer/service.proto
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = aiproductdataenhancer.Client.OpenAPIDateConverter;

namespace aiproductdataenhancer.Model
{
    /// <summary>
    /// GenerateProductDataRequestProductDataToGenerate
    /// </summary>
    [DataContract(Name = "GenerateProductDataRequestProductDataToGenerate")]
    public partial class GenerateProductDataRequestProductDataToGenerate : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GenerateProductDataRequestProductDataToGenerate" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="valueSet">valueSet.</param>
        /// <param name="metadata">Metadata is an optional field to provide additional information to the AI like, max length, min length, field description, etc..</param>
        /// <param name="tone">tone.</param>
        public GenerateProductDataRequestProductDataToGenerate(string name = default(string), List<string> valueSet = default(List<string>), Dictionary<string, string> metadata = default(Dictionary<string, string>), AiproductdataenhancerTone tone = default(AiproductdataenhancerTone))
        {
            this.Name = name;
            this.ValueSet = valueSet;
            this.Metadata = metadata;
            this.Tone = tone;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ValueSet
        /// </summary>
        [DataMember(Name = "valueSet", EmitDefaultValue = false)]
        public List<string> ValueSet { get; set; }

        /// <summary>
        /// Metadata is an optional field to provide additional information to the AI like, max length, min length, field description, etc.
        /// </summary>
        /// <value>Metadata is an optional field to provide additional information to the AI like, max length, min length, field description, etc.</value>
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        public Dictionary<string, string> Metadata { get; set; }

        /// <summary>
        /// Gets or Sets Tone
        /// </summary>
        [DataMember(Name = "tone", EmitDefaultValue = false)]
        public AiproductdataenhancerTone Tone { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GenerateProductDataRequestProductDataToGenerate {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ValueSet: ").Append(ValueSet).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Tone: ").Append(Tone).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
